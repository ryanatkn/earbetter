/* generated by gro_plugin_moss */

.box {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
}

/* can be used to override the direction of a `.box` */
.row {
	display: flex;
	flex-direction: row;
	align-items: center;
}

.width_sm {
	width: 100%;
	max-width: var(--distance_sm);
}

.width_md {
	width: 100%;
	max-width: var(--distance_md);
}

.clickable {
	cursor: pointer;
	transform: var(--clickable_transform, scale3d(1, 1, 1));
	transform-origin: var(--clickable_transform_origin);
	transition-duration: var(--clickable_transition_duration); /* default to instant, chunky/lofi */
}
.clickable:focus {
	transform: var(--clickable_transform_focus, scale3d(1.07, 1.07, 1.07));
}
.clickable:hover {
	transform: var(--clickable_transform_hover, scale3d(1.1, 1.1, 1.1));
}
.clickable:active,
.clickable.active {
	transform: var(--clickable_transform_active, scale3d(1.2, 1.2, 1.2));
}

/* A pane is a box floating over the page, like for dialogs.
			By default it's opaque, resetting the background to the initial depth. */
.pane {
	background-color: var(--pane_bg, var(--bg));
	box-shadow: var(
		--pane_shadow,
		/* TODO this is terrible, maybe add all the variables? should be culled anyway? */
			var(--shadow_bottom_md)
			color-mix(in hsl, var(--shadow_color) var(--shadow_alpha_3), transparent)
	);
	border-radius: var(--border_radius_xs);
}

/* A panel is a box embedded into the page, useful for visually isolating content. */
.panel {
	border-radius: var(--border_radius_xs);
	background-color: var(--panel_bg, var(--fg_1));
}

/* TODO other button variants? */
/* TODO this is slightly strange that it doesn't use --icon_size */
/* These are used as modifiers to buttons, and so they use `:where` so they cascade. */
.icon_button {
	width: var(--input_height);
	height: var(--input_height);
	min-width: var(--input_height);
	min-height: var(--input_height);
	flex-shrink: 0;
	line-height: 1;
	font-weight: 900;
	padding: 0;
}

.chip {
	font-weight: 600;
	padding-left: var(--space_xs);
	padding-right: var(--space_xs);
	background-color: var(--fg_1);
	border-radius: var(--border_radius_xs);
}
a.chip {
	font-weight: 700;
}

.relative {
	position: relative;
}
.overflow_x_auto {
	overflow-x: auto;
}
/** Same as `display: inline flow-root`. */
.display_inline_block {
	display: inline-block;
}
.flex_1 {
	flex: 1;
}
.font_size_xl {
	font-size: var(--font_size_xl);
	--font_size: var(--font_size_xl);
}
.font_size_xl3 {
	font-size: var(--font_size_xl3);
	--font_size: var(--font_size_xl3);
}
.text_align_left {
	text-align: left;
}
.text_align_center {
	text-align: center;
}
.color_c_5 {
	color: var(--color_c_5);
}
.w_100 {
	width: 100%;
}
.h_100 {
	height: 100%;
}
.p_md {
	padding: var(--space_md);
}
.p_xl {
	padding: var(--space_xl);
}
.p_xl3 {
	padding: var(--space_xl3);
}
.pt_0 {
	padding-top: 0;
}
.pt_lg {
	padding-top: var(--space_lg);
}
.pt_xl2 {
	padding-top: var(--space_xl2);
}
.pb_md {
	padding-bottom: var(--space_md);
}
.py_xl {
	padding-top: var(--space_xl);
	padding-bottom: var(--space_xl);
}
.m_0 {
	margin: 0;
}
.mt_md {
	margin-top: var(--space_md);
}
.mb_0 {
	margin-bottom: 0;
}
.mb_md {
	margin-bottom: var(--space_md);
}
.mb_lg {
	margin-bottom: var(--space_lg);
}
.ml_lg {
	margin-left: var(--space_lg);
}
.mx_auto {
	margin-left: auto;
	margin-right: auto;
}
.my_0 {
	margin-top: 0;
	margin-bottom: 0;
}
.my_md {
	margin-top: var(--space_md);
	margin-bottom: var(--space_md);
}
.my_lg {
	margin-top: var(--space_lg);
	margin-bottom: var(--space_lg);
}

/* generated by gro_plugin_moss */
